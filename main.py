import os
import asyncio
import logging
from dotenv import load_dotenv
import discord
from discord import app_commands
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram import Update
from datetime import datetime

logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s',
    encoding='utf-8'
)

def log_action(message):
    logging.info(message)

stats = {
    'ping_count': 0,
    'users': set()
}

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
TARGET_CHANNEL_ID = int(os.getenv("TARGET_CHANNEL_ID"))
HEADER_TO_REMOVE = os.getenv("HEADER_TO_REMOVE")
RP_BOT_ID = int(os.getenv("RP_BOT_ID"))

# –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

async def handle_telegram_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or message.from_user.id != RP_BOT_ID or not message.text:
        return
    content = message.text.strip()
    if content.startswith(HEADER_TO_REMOVE):
        body = content[len(HEADER_TO_REMOVE):].lstrip("\n").strip()
    else:
        body = content
    if body:
        channel = discord_client.get_channel(TARGET_CHANNEL_ID)
        if channel:
            await channel.send(f"@everyone\n{body}")
            log_action(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ Telegram: {body}")

telegram_app.add_handler(
    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_telegram_message)
)

intents = discord.Intents.default()
intents.message_content = True
discord_client = discord.Client(intents=intents)
tree = app_commands.CommandTree(discord_client)

@discord_client.event
async def on_ready():
    start_time = datetime.utcnow()
    activity = discord.Activity(
        type=discord.ActivityType.watching,
        name="üì∫üü£ Twitch: ilven69 üëæ",
        start=start_time
    )
    await discord_client.change_presence(activity=activity, status=discord.Status.online)
    await tree.sync()
    print(f"Discord-–±–æ—Ç {discord_client.user} –≥–æ—Ç–æ–≤!")
    print(f"Slash-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    log_action("Discord-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@tree.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
async def ping(interaction: discord.Interaction):
    if interaction.channel_id != TARGET_CHANNEL_ID:
        log_action(f"–ü–æ–ø—ã—Ç–∫–∞ /ping –Ω–µ –≤ —Ç–æ–º –∫–∞–Ω–∞–ª–µ: –æ—Ç {interaction.user} (id: {interaction.user.id})")
        await interaction.response.send_message(
            "—Å–ª—ã—à—å –∏–¥–∏ –Ω–∞—Ö—É–π", ephemeral=True
        )
        return
    stats['ping_count'] += 1
    stats['users'].add(interaction.user.id)
    log_action(f"/ping –∏—Å–ø–æ–ª–Ω–µ–Ω–∞: –æ—Ç {interaction.user} (id: {interaction.user.id})")
    await interaction.response.send_message("–ø–æ–Ω–≥ –±–ª—è—Ç—å, –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –µ–±–∏ –µ–≥–æ")

@tree.command(name="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
async def stats_command(interaction: discord.Interaction):
    msg = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        f"- /ping –≤—ã–∑–≤–∞–Ω: {stats['ping_count']} —Ä–∞–∑\n"
        f"- –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['users'])}\n"
    )
    log_action(f"/stats –∑–∞–ø—Ä–æ—à–µ–Ω–∞: –æ—Ç {interaction.user} (id: {interaction.user.id})")
    await interaction.response.send_message(msg)

async def main():
    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    telegram_task = asyncio.create_task(telegram_app.run_polling())
    # –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞
    await discord_client.start(DISCORD_BOT_TOKEN)
    await telegram_task

if __name__ == '__main__':
    asyncio.run(main())